# Local filesystem mounting			-*- shell-script -*-

pre_mountroot()
{
	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-top"
	run_scripts /scripts/local-top
	[ "$quiet" != "y" ] && log_end_msg
}

mountroot()
{
	# list of possible userdata partition names
	partlist="userdata UDA DATAFS"

	pre_mountroot

	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-premount"
	run_scripts /scripts/local-premount
	[ "$quiet" != "y" ] && log_end_msg

	# Mount root
	#
	# Create a temporary mountpoint for the bindmount
	mkdir -p /tmpmnt

	# Make sure the device has been created by udev before we try to mount
	udevadm settle

	# find the right partition
	for partname in $partlist; do
		part=$(find /dev -name $partname|tail -1)
		path=$(readlink -f $part)
		[ -n "$path" ] && break
	done
	if [ -z "$path" ]; then
		echo "initrd: could not find partition !" >/dev/kmsg || true
		echo 0 >/sys/class/android_usb/android0/enable || true
		echo 18d1 >/sys/class/android_usb/android0/idVendor || true
		echo D002 >/sys/class/android_usb/android0/idProduct || true
		echo adb >/sys/class/android_usb/android0/functions || true
		echo 1 >/sys/class/android_usb/android0/enable || true
		mkdir -p /system/bin
		cp /bin/sh /system/bin/
		echo "initrd: starting adbd for debugging" >/dev/kmsg || true
		/sbin/adbd
		wait $!
	fi
	echo "initrd: mounting $path" >/dev/kmsg || true

	# Mount the disk to the temporary mountpoint, then bindmount to /root
	mount $path /tmpmnt
	mount --bind /tmpmnt/ubuntu ${rootmnt}

	# originally we used following line (for variable reference)
	#mount ${roflag} ${FSTYPE:+-t ${FSTYPE} }${ROOTFLAGS} ${ROOT} ${rootmnt}
	mountroot_status="$?"

	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-bottom"
	run_scripts /scripts/local-bottom
	[ "$quiet" != "y" ] && log_end_msg
}
